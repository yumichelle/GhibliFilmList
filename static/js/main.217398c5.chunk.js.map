{"version":3,"sources":["Filmcard.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Filmcard","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","console","log","react_default","a","createElement","className","information","title","description","director","producer","release_date","rt_score","Component","App","state","profiles","id","name","movieinfo","bind","assertThisInitialized","ghibli","src_Filmcard_0","key","_this2","axios","get","then","response","setState","data","catch","error","map","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2SAoCeA,2BAhCX,SAAAA,EAAaC,GAAU,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,GACnBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,IACNQ,QAAQC,IAAIR,EAAKD,OAFEC,wEAOnB,OACQS,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACPH,EAAAC,EAAAC,cAAA,UAAKR,KAAKJ,MAAMc,YAAYC,OAChCL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BAAf,gBACAH,EAAAC,EAAAC,cAAA,WAAMR,KAAKJ,MAAMc,YAAYE,aAE7BN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BAAf,aACAH,EAAAC,EAAAC,cAAA,WAAMR,KAAKJ,MAAMc,YAAYG,UAE7BP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BAAf,aACAH,EAAAC,EAAAC,cAAA,WAAMR,KAAKJ,MAAMc,YAAYI,UAE7BR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BAAf,iBACAH,EAAAC,EAAAC,cAAA,WAAMR,KAAKJ,MAAMc,YAAYK,cAE7BT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BAAf,iBACAH,EAAAC,EAAAC,cAAA,WAAMR,KAAKJ,MAAMc,YAAYM,mBAzB9BC,cCsDRC,cAnDb,SAAAA,EAAYtB,GAAW,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAkB,IACrBrB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAoB,GAAAf,KAAAH,KAAMJ,KACDuB,MAAQ,CACXC,SAAS,CACP,CACEC,GAAI,uCACJC,KAAM,oBACNV,YAAa,yGACbC,SAAU,iBACVC,SAAU,gBACVC,aAAc,OACdC,SAAU,QAIhBnB,EAAK0B,UAAY1B,EAAK0B,UAAUC,KAAf1B,OAAA2B,EAAA,EAAA3B,QAAA2B,EAAA,EAAA3B,CAAAD,KAfIA,yEAkBb6B,GAER,OACEpB,EAAAC,EAAAC,cAACmB,EAAD,CAAUC,IAAKF,EAAOL,GAAIX,YAAegB,gDAIzB,IAAAG,EAAA7B,KAElB8B,IAAMC,IAAI,yCACTC,KAAM,SAACC,GAEN7B,QAAQC,IAAI4B,GACZJ,EAAKK,SAAS,CAACd,SAAUa,EAASE,SACjCC,MAAO,SAACC,GACTjC,QAAQC,IAAIgC,sCAQd,OACE/B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACVT,KAAKmB,MAAMC,SAASkB,IAAItC,KAAKuB,mBA5CtBN,aCOEsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvC,EAAAC,EAAAC,cAACsC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,KAAK,SAAAoB,GACjCA,EAAaC","file":"static/js/main.217398c5.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './Filmcard.css';\n\nclass Filmcard extends Component<any, any> {\n    constructor (props:any){\n        super(props);\n        console.log(this.props);\n        // console.log: to see if there's data in console\n    }\n\n    render(){\n        return (\n                <div className=\"container\">\n                        <h1>{this.props.information.title}</h1>\n                    <div className=\"cardinfo\">\n                        <div className=\"responsedata_information\">description:</div> \n                        <div>{this.props.information.description}</div>\n                    \n                        <div className=\"responsedata_information\">director:</div>\n                        <div>{this.props.information.director}</div>\n                    \n                        <div className=\"responsedata_information\">producer:</div>\n                        <div>{this.props.information.producer}</div>\n                        \n                        <div className=\"responsedata_information\">release date:</div>\n                        <div>{this.props.information.release_date}</div>\n                    \n                        <div className=\"responsedata_information\">film ratings:</div>\n                        <div>{this.props.information.rt_score}</div>\n                    </div>\n                </div>\n           \n        );\n    }\n}\n\nexport default Filmcard;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport Filmcard from './Filmcard';\n\nclass App extends Component<any, any> {\n  constructor(props: any){\n    super(props);\n    this.state = {\n      profiles:[\n        {\n          id: '2baf70d1-42bb-4437-b551-e5fed5a87abe',\n          name: 'Castle in the Sky',\n          description: 'The orphan Sheeta inherited a mysterious crystal that links her to the mythical sky-kingdom of Laputa.',\n          director: 'Hayao Miyazaki',\n          producer: 'Isao Takahata',\n          release_date: '1986',\n          rt_score: '95',\n        }\n      ],\n    }\n    this.movieinfo = this.movieinfo.bind(this);\n  }\n\n  movieinfo(ghibli: any){\n    //can rename the ghibli part\n    return(\n      <Filmcard key={ghibli.id} information = {ghibli} />\n      // key is for react to differentiate using the id in the API.\n    );    \n  }\n  componentDidMount (){\n     //will happen right after render\n    axios.get('https://ghibliapi.herokuapp.com/films')\n    .then( (response) => {\n      // do something with response\n      console.log(response);\n      this.setState({profiles: response.data})\n    }).catch( (error) => {\n      console.log(error);\n    }\n    );\n\n  }\n\n\n  render() {\n    return (\n      <div className=\"Filmcard\">\n          {this.state.profiles.map(this.movieinfo)}\n\n          {/* <Filmcard profile={this.state.profiles[0]}/> */}\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}